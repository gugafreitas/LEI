interface Reuniao {
    void participa(int lista);
    void abandona(int lista);
    int naSala();
    int aEspera();
}

class Sala implements Reuniao{
    int L=6;
    private Set<Integer> naReuniao = new HashSet<>(); //listas presentes na reuniao (1-10)
    private Set<Integer> aEspera = new HashSet<>(); //listas aguardam para entrar na reuniao (1-10)
    private ReentrantLock lock = new ReentrantLock();
    private Condition cond = lock.newCondition();

    @Override
    public void participa(int lista) {
        try {
            lock.lock();
            if (naReuniao.size()==1){
                aEspera.add(lista);
                cond.await();
            } else{
                naReuniao.add(lista);
            }
        }
        finally {
            lock.unlock();
        }
    }

    @Override
    public void abandona(int lista) {
        try {
            lock.unlock();
            naReuniao.remove(lista);
            cond.signalAll();
        }
        finally {
            lock.unlock();
        }
    }

    @Override
    public int naSala() {
        try {
            lock.lock();
            return naReuniao.size();
        }
        finally {
            lock.unlock();
        }
    }

    @Override
    public int aEspera() {
        try{
            lock.lock();
            return aEspera.size();
        }
        finally {
            lock.unlock();
        }
    }
}